#!/usr/bin/env python

# run OTU clustering on an infinite stream of nucleotides.

#
# 1. create batch files and place into temporary directory.
# 2. run usearch on batch files.
# 3. return results in some easily-parseable form (preferably
#        something that doesn't require reading into memory)
#

import argparse
import tempfile


def parse_args():
    parser = argparse.ArgumentParser()

    parser.add_argument('--input-stream', default='/dev/stdin')
    parser.add_argument('--output-stream', default='/dev/stdout')
    parser.add_argument('--database')
    parser.add_argument('--batch-size', type=int)

    return parser.parse_args()


class BatchWriter(object):

    def __init__(self, **kwargs):
        self.batch_size = kwargs['batch_size']

        # function that gets called back when batch is
        # written
        self.callback = kwargs.get('callback', default=None)

    def __add__(self, obj):
        pass

    def __exit__(self):
        self.__close__()

    def __close__(self):
        # clean up
        # write final batch
        # do final callback
        pass


def main():

    output_handle = open(args.output_stream, 'w')

    with open(args.input_stream) as handle:
        for line in handle:
            output_handle.write(line)


if __name__ == '__main__':
    main()
