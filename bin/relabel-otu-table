#!/usr/bin/env python

import pandas
import sys
import argparse

def parse_args():
    parser = argparse.ArgumentParser()

    parser.add_argument('--otu-abund', help='OTU table')
    parser.add_argument('--tax-map', help='GreenGenes-format Taxonomy Map')
    parser.add_argument('--level', help='Taxonomic Level (Phylum, ..., Species')
    parser.add_argument('--out', help='output csv (default=stdout)', default=sys.stdout)

    return parser.parse_args()


def load_data(**kwargs):

    otu_abund = kwargs['otu_abund']
    tax_map = kwargs['tax_map']

    def get_compression(f):
        if f.endswith('.gz'):
            return 'gzip'
        else:
            return None

    otu_abund = pandas.read_csv(otu_abund,
                                index_col=0,
                                compression=get_compression(otu_abund))

    print 'loaded otu abund'

    tax_map = pandas.read_csv(tax_map,
                               index_col=0,
                               header=None,
                               names=['domain',
                                      'phylum',
                                      'class',
                                      'order',
                                      'family',
                                      'genus',
                                      'species',
                                      'otu'],
                               compression=get_compression(tax_map))

    tax_map.index = map(str, tax_map.index)

    return (otu_abund, tax_map)


def main():

    args = parse_args()
    level = args.level.lower()

    print >> sys.stderr, 'loading otu_abund = %s' % args.otu_abund
    print >> sys.stderr, 'loading tax_map = %s' % args.tax_map
    print >> sys.stderr, 'level = %s' % level

    otu, tax = load_data(otu_abund = args.otu_abund,
                         tax_map = args.tax_map)

    print 'n samples = %s' % len(otu.index)
    print 'n otus = %s' % len(otu.columns)
    print 'n taxonomies = %s' % len(tax.index)

    new_columns = []
    for otu_id in otu.columns:
        otu_id = str(otu_id)

        try:
            taxonomy = tax.ix[otu_id][level]
        except KeyError:
            taxonomy = otu_id

        # fix empty taxonomic descriptions
        if pandas.isnull(taxonomy):
            taxonomy = 'Unclassified'

        new_columns.append(taxonomy)

    otu.columns = new_columns

    otu = otu.groupby(otu.columns, axis=1).sum()

    otu.to_csv(args.out)

if __name__ == '__main__':
    main()
