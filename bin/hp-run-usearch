#!/usr/bin/env python

import argparse
from glob import glob
import os
import sys

import doctest

def main():
    args = parse_args()

    if not os.path.exists(args.directory):
        print >> sys.stderr, 'ERROR: %s does not exist!' % args.directory
        quit(-1)


    indices = range(1, len(glob('%s/*.fasta' % args.directory)))

    incomplete_indices = []

    for i in indices:
      ff = '%s/sample-%s.fasta' % (args.directory, i)
      base = os.path.basename(ff)
      uc_file =  '%s/%s/%s.uc' % (args.directory, args.out, base)
      complete_file = '%s/%s/%s.completed' % (args.directory, args.out, base)
      has_uc = os.path.exists(uc_file)
      has_complete = os.path.exists(complete_file)
      if not all([has_uc, has_complete]):
        print '%s incomplete (has_uc: %s, has_complete: %s) (%s)' % (i, has_uc, has_complete, ff)
        if args.clean_temp:
          if has_uc:
            os.remove(uc_file)
          if has_complete:
            os.remove(complete_file)
        incomplete_indices.append(i)


    if len(incomplete_indices) > 0:

        ranges = '%s-%s' % (min(incomplete_indices), max(incomplete_indices))

        print 'To re-submit jobs that are either crashed, running or incomplete, run:'

        if args.run_all:
            indicies = ranges
        else:
            indicies = ','.join(str(i) for i in incomplete_indices)

        command = 'qsub -t %s -v OUT=%s,BASEDIR=%s,DATABASE=%s,IDENTITY=%s %s' % (indicies,
                                                                                  args.out,
                                                                                  os.path.abspath(args.directory),
                                                                                  args.database,
                                                                                  args.identity,
                                                                                  os.path.abspath(args.qsub))

        if args.submit == True:
            print 'running %s' % command
            os.system(command)
        else:
            print 'run the following:'
            print command



def parse_args():
    parser = argparse.ArgumentParser()

    parser.add_argument('--directory', '-d', required=True)
    parser.add_argument('--database', default='/scratch/lfs/adavisr/gg135.97_otus.udb')
    parser.add_argument('--identity', default='0.97')
    parser.add_argument('--qsub', default='/home/adavisr/Code/hiseq-16s-pipeline/qsubs/usearch_array.sh')
    parser.add_argument('--submit', help='submit job instead of just printing', default=False, action='store_true')
    parser.add_argument('--run-all', default=False, action='store_true')
    parser.add_argument('--out', help='output prefix', required=True)
    parser.add_argument('--clean-temp', help='clean erroneous output/temp files', default=False, action='store_true')

    return parser.parse_args()


def condense_range(l):
    ''' Condense a list of numbers into a number range or a list of numbers:

    For example,

    >>> print condense_range([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
    1-10

    >>> print condense_range([1, 2, 3, 5, 6, 7, 8, 9, 10])
    1-3,5-10

    >>> print condense_range([2, 4, 6])
    2, 4, 6

    >>> print condense_range([10, 9, 8, 7, 5, 4, 3, 2, 1])
    1-5,7-10
    '''

    l = sorted(l)

    start = min(l)
    last = None

    group = []

    groups = []

    for item in l:

        # first number
        if last == None:
            group = [item]

        # number is next
        # append to group and move on
        elif last == (item + 1):
            group.append(item)

        # number is not next
        # finish group
        # start a new group
        elif last != (item + 1):
            print >> sys.stderr, group
            if len(group) == 0:
                assert 'never happens' == True
            elif len(group) == 1:
                assert last == group[0]
                groups.append('%s' % last)
                group = [item] # start a new group
            if len(group) > 1:
                groups.append('%s-%s' % (group[0], group[-1]))
                group = [item] # start a new group

        last = item

    ranges = ','.join(groups)

    return ranges




if __name__ == '__main__':
    #doctest.testmod()
    main()
